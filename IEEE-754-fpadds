 .syntax unified
  .cpu cortex-m4
  .fpu softvfp
  .thumb
  
  .global   fp_add

@ fp_add subroutine
@ Add two IEEE-754 floating point numbers
@
@ Paramaters:
@   R0: a - first number
@   R1: b - second number
@
@ Return:
@   R0: result - a+b
@
 @ a = first float && b = second float 
 @ R4 = aStore, R5 = bStore, R6 = expA, R7 = expB, R8 = fracA, R9 = fracB, R10 = diff;

fp_add:
  PUSH    {R6-R12, LR}                      @ add any registers R4...R12 that you use
  
 MOV   R12, #0             @ r12 = 0; // differnece between two floats = 0
 MOV   R6, R0              @ store first float 
 MOV   R7, R1              @ store second float
 BL    fp_exp              @ branch to meathod // get exponant of first float as a signed integer (2's complement)

 MOV   R8, R0              @ R8 = exponantA;
 MOV   R0, R6              @ R0 = floatA; 
 BL    fp_frac             @ branch to meathod // get fraction of first float as a signed integer (2's complement)
 //repeat for float B
 MOV   R10, R0             @ R10 = fractionA; // same comments
 MOV   R0, R7               
 BL    fp_exp

 MOV   R9, R0              @ R9 = exponantB; // same comments
 MOV   R0, R7
 BL    fp_frac

 MOV   R11, R0             @ R11 = fractionB;
 CMP   R8, R9              @ if (expA = expB)
 BEQ   same                @ { branch to equal }
 BGT   higher              @ else if (expA > expB)  { branch to higher }
                           @ else {
lower:
 SUB   R12, R9, R8         @ R12 = R9 - R8 // exponantB - exponantA;
 ADD   R8, R8, R12         @ R8 = R8 + R12 // exponantA + difference;
 MOV   R10, R10, ASR R12   @ ASR (fracA, difference); }
 B     same                      

same:
 ADD   R0, R10, R11         @ R0 = R10 + R11; // result = exponantA + exponantB;
 MOV   R1, R9               @ R1 = exponantB;
 BL    fp_enc

 B     ended

 higher:
 SUB   R12, R8, R9          @   R12 =  r8 - r7; // difference = exponantA - exponantB;
 ADD   R9, R9, R12          @   R9 = R8 + R12 // = exponantB + difference;
 MOV   R11, R11, ASR R12    @   ASR (fractionB, difference);
 B     same                 @ }

 
 ended:

 POP     {R4-R10, PC}                      @ add any registers R4...R12 that you use

@ fp_exp subroutine
@ Obtain the exponent of an IEEE-754 (single precision) number as a signed
@   integer (2's complement)
@
@ Parameters:
@   R0: IEEE-754 number
@1111111100000000000000000000000
@ Return:
@   R0: exponent (signed integer using 2's complement)

fp_exp:
  PUSH    {R5, LR}                      @ add any registers R4...R12 that you use

  AND     R5, R0, #0x7f800000           @ leaves just the 8 bits of the exponent
  MOV     R5, R5, LSR #23               @ moves the 8 bits to the furthest part right to get the actually value
  SUB     R5, R5, #127                  @ R5 = R5 -127; //subtract bias to get real e
  MOV     R0, R5                        @ R0 = R5; //store in R0  as asked 

  POP     {R5, PC}                      @ add any registers R4...R12 that you use



@ fp_frac subroutine
@ Obtain the fraction of an IEEE-754 (single precision) number.
@
@ The returned fraction will include the 'hidden' bit to the left
@   of the radix point (at bit 23). The radix point should be considered to be
@   between bits 22 and 23.
@
@ The returned fraction will be in 2's complement form, reflecting the sign
@   (sign bit) of the original IEEE-754 number.
@
@ Parameters:
@   R0: IEEE-754 number
@
@ Return:
@   R0: fraction (signed fraction, including the 'hidden' bit, in 2's
@         complement form)
fp_frac:
  PUSH    {R5-R8, LR}                      @ add any registers R4...R12 that you use
 
 MOV R6, R0                                @R6= R0; // store the IEEE number in R6 
 MOV R5, R0                                @R5= R0; // store the IEEE number in R5 

 LDR R12, =0x007FFFFF                      @R12 = 00000000011111...111; // get binary number for and (all 1s bar the first 9 bits)

 AND R7, R5, R12                           @R7 = AND(R5, R12); // do the and function to be left with just your F
 ADD R7, R7, #0x00800000                   @R7 = R7 + 00000000100000000000000000000000; // add 00000000100000000000000000000000 to seperate the f and the e

 AND R6, R6, #0x80000000                   @R6 = AND(R6, 100000000000000000000000000000000); // and manioulation with 100000000000000000000000000000000
 CMP R6, #0                                @ if(R6<0) { //check is s is pos or neg
 BNE Minus
 B   Plus

 Minus:                              
 RSB R7, R7, #0                            @R7 = 0-R7 ; //if minus change sign of f
 MOV R0, R7                                @R0 = R7;//store in R0  
 B over                                    @ }
 Plus:
 MOV R0, R7                                @if else (store in r0 as positive)
 B over

over:

  POP     {R5-R8, PC}                      @ add any registers R4...R12 that you use



@ fp_enc subroutine
@ Encode an IEEE-754 (single precision) floating point number given the
@   fraction (in 2's complement form) and the exponent (also in 2's
@   complement form).
@
@ Fractions that are not normalised will be normalised by the subroutine,
@   with a corresponding adjustment made to the exponent.
@
@ Parameters:
@   R0: fraction (in 2's complement form)
@   R1: exponent (in 2's complement form)
@
@ Return:
@   R0: IEEE-754 single precision floating point number
fp_enc:
  PUSH    {R4-R6, LR}                      @ add any registers R4...R12 that you use

  MOV R4, #0                               @ R4=0;
  CMP R0, #0                               @ compare f with 0 
  BGE notNeg 
  LDR R4, =0x80000000                      @ if(f<0) { R4=0x80000000 ; // load 100000000000000000000000000000000 fo same reason as above
  NEG R0, R0                               @ change sign} //The NEG pseudo-instruction negates the value in one register and stores the result in a second register.

  notNeg:
  CLZ R5, R0                               @ count amount of leaidng zeros (ref: http://qcd.phys.cmu.edu/QCDcluster/intel/vtune/reference/INST_CLZ.htm)
  MOV R6, #8                               @ load 8 to use as a comparison 

  CMP R5, R6                               @ if(R5<R6)    {    
  BEQ Part2
  BHI ReManipluate
  SUB R5, R6, R5                           @ R5 = R6 - R5 ; // 8 - no. of leading zeros = position of first 1 (R5)
  MOV R0, R0, LSR R5                       @ shift right by this amount to leave the fraction 
  ADD R1, R1, R5                           @ R1 = R1 + R5; // add on the exponant  }
  B   Part2
                                           @ if else (R5>R6) {
  ReManipluate:                            
  SUB R5, R5, R6                           @ R5 = R5 - R6; // no. of leading zeros- 8  = r5
  MOV R0, R0, LSL R5                       @ shift left by r5
  SUB R1, R1, R5                           @ R1 = R1 - R5; // take it away then to isolate 
                                           @ }
  
  Part2:
                                           @ else {
  SUB R0, R0, #0x00800000                  @ R0 = R0 - #0x00800000; // sub #0x00800000 to get exponant isolated
  ADD R1, R1, #127                         @ R1 = R1 + 127; // add bias
  MOV R1, R1, LSL #23                      @ shift left by 23 bits to e position 
  ADD R0, R0, R1                           @ R0 = R0 + R1; // add exponant and f in correct position 
  ADD R0, R0, R4                           @ R0 = R0 + R4; // load R0 sign 

  POP     {R4-R6, PC}                      @ add any registers R4...R12 that you use
@
@ Copy your fp_frac, fp_exp, fp_enc subroutines from Assignment #6 here
@   and call them from fp_add above.
@


.end
